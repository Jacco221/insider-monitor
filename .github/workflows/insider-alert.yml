name: Insider Alerts (WhatsApp)

on:
  workflow_dispatch: {}
  schedule:
    # elke 30 minuten
    - cron: "*/30 * * * *"

permissions:
  contents: read

jobs:
  alert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # veiligheidsnet
          pip install pyyaml twilio || true

      - name: Prepare config.local.yaml
        env:
          SEC_USER_AGENT: ${{ secrets.SEC_USER_AGENT }}
        run: |
          set -e
          if [ ! -f config.local.yaml ] && [ -f config.yaml ]; then
            cp config.yaml config.local.yaml
          fi
          python - <<'PY'
          import os, yaml
          p='config.local.yaml'
          cfg={}
          if os.path.exists(p):
              cfg = yaml.safe_load(open(p)) or {}
          ua=os.getenv('SEC_USER_AGENT')
          if ua:
              cfg.setdefault('user_agent', {})['ua']=ua
          with open(p,'w') as f:
              yaml.safe_dump(cfg, f, sort_keys=False, allow_unicode=True)
          print("‚úÖ config.local.yaml updated")
          PY

      - name: Debug repo layout
        run: |
          echo "PWD=$(pwd)"
          ls -lah
          echo "--- scripts on root ---"
          ls -lah scripts || true
          echo "--- scripts under insider-monitor/ ---"
          ls -lah insider-monitor/scripts || true

      # Detecteer waar de scripts staan en stel PREFIX in ("" of "insider-monitor/")
      - name: Resolve script prefix
        id: pf
        shell: bash
        run: |
          if [ -f scripts/fetch_insiders.py ]; then
            echo "prefix=" >> "$GITHUB_OUTPUT"
            echo "Using prefix: (root)"
          elif [ -f insider-monitor/scripts/fetch_insiders.py ]; then
            echo "prefix=insider-monitor/" >> "$GITHUB_OUTPUT"
            echo "Using prefix: insider-monitor/"
          else
            echo "Kon scripts niet vinden"
            exit 1
          fi

      - name: Run insider pipeline
        shell: bash
        run: |
          set -e
          PREF='${{ steps.pf.outputs.prefix }}'
          python "${PREF}scripts/fetch_insiders.py" --days 1 --config config.local.yaml
          python "${PREF}scripts/score_signals.py"  --config config.local.yaml
          python "${PREF}scripts/fetch_news.py"     --config config.local.yaml
          python "${PREF}scripts/report_builder.py" --config config.local.yaml

      - name: Detect new signals & build message
        id: detect
        run: |
          python - <<'PY'
          import glob, os, csv
          files = sorted(
              glob.glob('data/reports/insider_signals_*.csv'),
              key=os.path.getmtime, reverse=True
          )
          alert = False
          message = "Geen nieuwe insider-signalen gevonden."
          if files:
              f = files[0]
              try:
                  with open(f, newline='') as fh:
                      rows = list(csv.reader(fh))
                  n = max(len(rows)-1, 0)
                  if n > 0:
                      alert = True
                      message = f"‚úÖ {n} nieuw(e) insider-signaal/signalen. Zie rapport: {f}"
              except Exception as e:
                  message = f"‚ö†Ô∏è Kon rapport niet lezen ({e})."
          with open(os.environ['GITHUB_OUTPUT'],'a') as g:
              g.write(f"alert={'true' if alert else 'false'}\n")
              g.write(f"message={message}\n")
          PY

      - name: Send WhatsApp via Twilio (only if alert)
        if: steps.detect.outputs.alert == 'true'
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN:  ${{ secrets.TWILIO_AUTH_TOKEN }}
          ALERT_TO_INSIDER:   ${{ secrets.ALERT_TO_INSIDER }}  # bv. whatsapp:+31652615803
        run: |
          python - <<'PY'
          import os
          from twilio.rest import Client
          sid = os.getenv("TWILIO_ACCOUNT_SID")
          tok = os.getenv("TWILIO_AUTH_TOKEN")
          to  = os.getenv("ALERT_TO_INSIDER")
          msg = """${{ steps.detect.outputs.message }}"""
          if not all([sid, tok, to]):
              raise SystemExit("‚ùå Missing Twilio env vars")
          client = Client(sid, tok)
          m = client.messages.create(
              from_="whatsapp:+14155238886",  # Twilio WhatsApp SANDBOX
              to=to,
              body=f"üì£ Insider Monitor alert:\n{msg}"
          )
          print("‚úÖ WhatsApp sent, SID:", m.sid)
          PY

      - name: Upload reports (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            data/reports/**
            data/reports/history/**
            data/reports/*.csv
            data/reports/*.md
