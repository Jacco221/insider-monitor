name: Insider Alerts (WhatsApp)

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'   # elke 30 minuten

concurrency:
  group: insider-alert
  cancel-in-progress: true

jobs:
  alert:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (incl. twilio)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install twilio

      # ===== NEW: SEC Form-4 fetch =====
      - name: Fetch SEC Form 4 (edge)
        env:
          SEC_USER_AGENT: ${{ secrets.SEC_USER_AGENT }}
        run: |
          python scripts/fetch_insiders_sec.py
          echo "== sec_headlines =="
          sed -n '1,40p' data/reports/sec_headlines.txt || true

      - name: Run pipeline (verbose logging)
        run: |
          set +e
          echo "== fetch_insiders.py ==";  python scripts/fetch_insiders.py  2>&1 | sed 's/^/[fetch_insiders] /'  || echo "fetch_insiders: warning ($?)"
          echo "== score_signals.py ==";   python scripts/score_signals.py    2>&1 | sed 's/^/[score_signals] /'   || echo "score_signals: warning ($?)"
          echo "== fetch_news.py ==";      python scripts/fetch_news.py       2>&1 | sed 's/^/[fetch_news] /'      || echo "fetch_news: warning ($?)"
          echo "== report_builder.py ==";  python scripts/report_builder.py    2>&1 | sed 's/^/[report_builder] /'  || echo "report_builder: warning ($?)"
          echo "== List reports after pipeline =="; ls -lah data/reports || true
          echo "== latest.txt (first 40) =="; sed -n '1,40p' data/reports/latest.txt || true

      # Plaats SEC-headlines bovenaan 'Laatste nieuws' (dedupe)
      - name: Integrate SEC headlines into latest.txt
        run: |
          python - <<'PY'
          import pathlib, re
          d = pathlib.Path("data/reports")
          latest = d/"latest.txt"
          sec = d/"sec_headlines.txt"
          d.mkdir(parents=True, exist_ok=True)
          if not latest.exists():
              latest.write_text("== Laatste nieuws ==\n", encoding="utf-8")
          base = latest.read_text(encoding="utf-8", errors="ignore")
          sec_lines = []
          if sec.exists():
              for ln in sec.read_text(encoding="utf-8", errors="ignore").splitlines():
                  if ln.strip(): sec_lines.append(ln.strip())
          # Pak bestaande news-sectie
          m = re.search(r"^==\\s*Laatste nieuws\\s*==\\s*(.*)$", base, flags=re.M|re.S)
          body = m.group(1) if m else ""
          existing = set([x.strip() for x in body.splitlines() if x.strip()])
          # prepend nieuwe SEC regels die nog niet bestaan
          prepend = [ln for ln in sec_lines if ln not in existing][:6]
          new_news = "== Laatste nieuws ==\n"
          if prepend:
              new_news += "\\n".join(prepend) + "\\n"
          new_news += body
          # vervang of voeg sectie toe
          if m:
              head = base[:m.start()]
              latest.write_text(head + new_news, encoding="utf-8")
          else:
              latest.write_text(new_news + "\\n" + base, encoding="utf-8")
          print("[integrate] added", len(prepend), "SEC lines on top")
          PY
          echo "== latest.txt (first 60 after SEC integrate) =="
          sed -n '1,60p' data/reports/latest.txt || true

      # Guard blijft (maakt latest, seed of minimal indien nodig)
      - name: Build real-time headlines via RSS (if seed/minimal)
        run: |
          python scripts/fetch_headlines_rss.py || true
          echo "== Head latest.txt after RSS =="
          head -40 data/reports/latest.txt || true

      - name: Diagnostics (files & head)
        if: always()
        run: |
          echo "== List reports (.txt) =="; ls -lah data/reports/*.txt || true
          echo "== Head latest.txt =="; head -40 data/reports/latest.txt || true

      - name: Send WhatsApp with hottest news (never fail job)
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN:  ${{ secrets.TWILIO_AUTH_TOKEN }}
          ALERT_TO_INSIDER:   ${{ secrets.ALERT_TO_INSIDER }}
        run: python scripts/notify_whatsapp.py

      - name: Upload reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: data/reports/*.txt
          if-no-files-found: warn
