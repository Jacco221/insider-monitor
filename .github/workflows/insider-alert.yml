name: Insider Alerts (WhatsApp)

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *'   # elke 30 minuten

concurrency:
  group: insider-alert
  cancel-in-progress: true

jobs:
  alert:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (incl. twilio)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install twilio

      - name: Run pipeline (non-blocking)
        run: |
          set -e
          python scripts/fetch_insiders.py || echo "fetch_insiders: warning"
          python scripts/score_signals.py   || echo "score_signals: warning"
          python scripts/fetch_news.py      || echo "fetch_news: warning"
          python scripts/report_builder.py  || echo "report_builder: warning"
          echo "== latest.txt tail =="
          tail -50 data/reports/latest.txt || true

      - name: Send WhatsApp with hottest news (never fail job)
      - name: Ensure latest.txt exists (copy newest or create fallback)
        run: |
          python - <<'PY'
          import pathlib
          base=pathlib.Path("data/reports"); base.mkdir(parents=True, exist_ok=True)
          latest=base/"latest.txt"
          if not latest.exists():
              files=sorted(base.glob("*.txt"), key=lambda p: p.stat().st_mtime, reverse=True)
              if files:
                  latest.write_text(files[0].read_text(encoding="utf-8", errors="ignore"), encoding="utf-8")
                  print("Created latest.txt from:", files[0])
              else:
                  latest.write_text("== Laatste nieuws ==\nGeen headlines gevonden â€“ fallback.\n", encoding="utf-8")
                  print("Created fallback latest.txt")
          PY
        env:
          TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
          TWILIO_AUTH_TOKEN:  ${{ secrets.TWILIO_AUTH_TOKEN }}
          ALERT_TO_INSIDER:   ${{ secrets.ALERT_TO_INSIDER }}
        run: python scripts/notify_whatsapp.py

      - name: Upload reports (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            data/reports/latest.txt
            data/reports/summary_*.txt
          if-no-files-found: ignore
