name: Daily Crypto Pipeline

on:
  workflow_dispatch: {}
  # Optioneel: elke ochtend automatisch draaien
  # schedule:
  #   - cron: "0 6 * * *"   # 06:00 UTC ~ 08:00 NL-tijd

permissions:
  contents: read
  actions: write

concurrency:
  group: daily-crypto
  cancel-in-progress: false

jobs:
  build-and-report:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # -------------------- SETUP --------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Basis libs indien niet in requirements
          pip install pandas numpy requests python-dateutil

      - name: Prepare directories
        run: |
          set -euo pipefail
          mkdir -p data/reports data/state
          echo "::group::Repo tree (data/)"
          ls -laR data/ || true
          echo "::endgroup::"

      # -------------------- BUILD SCORES (FRESH + HARD CHECKS) --------------------
      - name: Build scores (CoinGecko ‚Üí scores_latest.csv/json)  # STRICT + FRESH
        env:
          FORCE_FRESH: "1"
        run: |
          set -euo pipefail

          echo "üßπ Clean old outputs‚Ä¶"
          rm -f data/reports/scores_latest.csv data/reports/scores_latest.json || true
          rm -f data/reports/latest.csv data/reports/latest.json || true

          echo "‚ñ∂Ô∏è Run build_scores.py (verbose)‚Ä¶"
          python3 -u scripts/build_scores.py

          echo "üîé Diagnostics after build:"
          ls -lh data/reports | sed -n '1,200p' || true
          head -n 5 data/reports/scores_latest.csv || true

          # Hard checks: bestanden bestaan √©n zijn ‚Äúgroot genoeg‚Äù
          if [ ! -f data/reports/scores_latest.csv ]; then
            echo "‚ùå scores_latest.csv ontbreekt"; exit 1
          fi
          if [ ! -f data/reports/scores_latest.json ]; then
            echo "‚ùå scores_latest.json ontbreekt"; exit 1
          fi

          BYTES_CSV=$(wc -c < data/reports/scores_latest.csv || echo 0)
          if [ "$BYTES_CSV" -lt 5000 ]; then
            echo "‚ùå scores_latest.csv is te klein (${BYTES_CSV} bytes) ‚Üí waarschijnlijk geen verse API-data."
            exit 1
          fi

          echo "‚úÖ Build scores OK (${BYTES_CSV} bytes)."

      - name: Sanity: fingerprint scores_latest.csv
        run: |
          set -euo pipefail
          echo "üîê Hash van scores_latest.csv:"
          sha256sum data/reports/scores_latest.csv | tee scores.sha
          echo "‚ÑπÔ∏è Als deze hash exact gelijk is aan gisteren, is er mogelijk geen nieuwe data opgehaald."

      # -------------------- TOP 5 --------------------
      - name: Build top5_latest.csv & top5_latest.md
        run: |
          set -euo pipefail
          python - <<'PY'
          import os, pandas as pd
          os.makedirs("data/reports", exist_ok=True)
          src = "data/reports/scores_latest.csv"
          if not os.path.exists(src):
              raise SystemExit("scores_latest.csv ontbreekt")
          df = pd.read_csv(src)

          # zoek de kolom die de totale score representeert
          score_key = None
          for k in ("score","total_score","Total_%","TOTAL_%","total"):
              if k in df.columns:
                  score_key = k; break
          if not score_key:
              raise SystemExit(f"Geen score-kolom gevonden in {list(df.columns)}")

          out = df.sort_values(score_key, ascending=False).head(5).copy()
          out.rename(columns={score_key:"score"}, inplace=True)
          out.to_csv("data/reports/top5_latest.csv", index=False)

          lines=["| # | Symbol | Name | Score |",
                 "|---:|:------|:-----|-----:|"]
          for i, row in enumerate(out.itertuples(index=False), 1):
              sym = getattr(row, "symbol", "") or getattr(row, "Symbol", "") or ""
              name = getattr(row, "name", "") or getattr(row, "Name", "")
              score = getattr(row, "score", "")
              lines.append(f"| {i} | {sym} | {name} | {score} |")
          with open("data/reports/top5_latest.md","w") as f:
              f.write("\n".join(lines)+"\n")
          print("‚úÖ top5_latest.csv & top5_latest.md gemaakt.")
          PY

      # -------------------- MARKTREGIME (MA20) --------------------
      - name: Annotate top5 with market regime (MA20) & advice
        run: |
          set -euo pipefail
          if [ -f scripts/annotate_market_regime.py ]; then
            python3 scripts/annotate_market_regime.py --window 20 --out-md data/reports/top5_latest.md
          else
            echo "‚ö†Ô∏è scripts/annotate_market_regime.py ontbreekt ‚Äî stap overgeslagen"
          fi

      # -------------------- COOLDOWN & ALLOCATIE --------------------
      - name: Cooldown guard (append note in MD)
        run: |
          set -euo pipefail
          if [ -f scripts/cooldown_guard.py ]; then
            python3 scripts/cooldown_guard.py --md data/reports/top5_latest.md || true
          else
            echo "‚ÑπÔ∏è cooldown_guard.py ontbreekt ‚Äî stap overgeslagen"
          fi

      - name: Allocation advice (append to MD)
        run: |
          set -euo pipefail
          if [ -f scripts/advise_allocation.py ]; then
            python3 scripts/advise_allocation.py --append-md --md-file data/reports/top5_latest.md || true
          else
            echo "‚ÑπÔ∏è advise_allocation.py ontbreekt ‚Äî stap overgeslagen"
          fi

      # -------------------- MOONSHOTS V2 --------------------
      - name: Run Moonshot v2 (exclude top-30 + bluechips)
        run: |
          set -euo pipefail
          if [ -f scripts/moonshot_v2.py ]; then
            python3 scripts/moonshot_v2.py \
              --scores-csv  data/reports/scores_latest.csv \
              --scores-json data/reports/scores_latest.json \
              --out-csv     data/reports/moonshots_v2_latest.csv \
              --out-md      data/reports/moonshots_v2_latest.md \
              --top 10 \
              --min-volume 1.0 \
              --exclude-top-rank 30 \
              --exclude-bluechips
          else
            echo "‚ÑπÔ∏è moonshot_v2.py ontbreekt ‚Äî stap overgeslagen"
          fi

      # -------------------- DATED COPIES --------------------
      - name: Add dated copies (YYYY-MM-DD, UTC)
        run: |
          set -euo pipefail
          d=$(date -u +%F)
          cp data/reports/scores_latest.csv        "data/reports/scores_${d}.csv" || true
          cp data/reports/scores_latest.json       "data/reports/scores_${d}.json" || true
          cp data/reports/top5_latest.csv          "data/reports/top5_${d}.csv" || true
          cp data/reports/top5_latest.md           "data/reports/top5_${d}.md" || true
          cp data/reports/moonshots_v2_latest.csv  "data/reports/moonshots_v2_${d}.csv" || true
          cp data/reports/moonshots_v2_latest.md   "data/reports/moonshots_v2_${d}.md" || true

      # -------------------- ARTIFACT UPLOAD --------------------
      - name: Upload reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            data/reports/**
          if-no-files-found: error
          retention-days: 14

