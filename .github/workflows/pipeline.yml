name: Daily Crypto Pipeline

on:
  workflow_dispatch:
  schedule:
    # 06:00 NL-tijd ≈ 04:00 UTC in winter, 05:00 UTC in zomer.
    - cron: '0 5 * * *'

permissions:
  contents: write

jobs:
  build-and-report:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy requests
          fi

      - name: Prepare report dir
        run: |
          mkdir -p data/reports data/state

      - name: Diagnostics (before build)
        run: |
          echo "::group::tree data"
          ls -lahR data || true
          echo "::endgroup::"

      # >>> Belangrijk: oude outputs eerst weg, zodat build MOET schrijven
      - name: Clean old outputs
        run: |
          rm -f data/reports/scores_latest.csv \
                data/reports/scores_latest.json \
                data/reports/top5_latest.csv \
                data/reports/top5_latest.md \
                data/reports/moonshots_v2_latest.csv \
                data/reports/moonshots_v2_latest.md \
                data/reports/latest.csv \
                data/reports/latest.json

      # -------- BUILD SCORES --------
      - name: Build scores (CoinGecko → scores_latest.csv/json)
        run: |
          python3 scripts/build_scores.py
          echo "::group::scores head"
          head -n 10 data/reports/scores_latest.csv
          echo "::endgroup::"
          echo "Regels in scores_latest.csv:"
          wc -l data/reports/scores_latest.csv

      - name: Assert scores exist (hard check)
        run: |
          test -f data/reports/scores_latest.csv || { echo "❌ scores_latest.csv ontbreekt"; exit 1; }
          test -s data/reports/scores_latest.csv || { echo "❌ scores_latest.csv is leeg"; exit 1; }

      # -------- TOP 5 BOUWEN --------
      - name: Build top5_latest.csv & top5_latest.md
        run: |
          python - <<'PY'
          import os, pandas as pd
          os.makedirs("data/reports", exist_ok=True)
          src = "data/reports/scores_latest.csv"
          df = pd.read_csv(src)
          # kies kolom voor sortering
          key = None
          for k in ("score","Total_%","total","TOTAL_%"):
              if k in df.columns: key=k; break
          if key is None: raise SystemExit("Geen score-kolom gevonden.")
          out = df.sort_values(key, ascending=False).head(5).copy()
          out.rename(columns={key:"score"}, inplace=True)
          out.to_csv("data/reports/top5_latest.csv", index=False)
          # markdown
          lines=["| # | Symbool | Score |","|--:|:-------|-----:|"]
          sym = next((c for c in out.columns if c.lower()=="symbol"), out.columns[0])
          for i,(idx,row) in enumerate(out.iterrows(),1):
              lines.append(f"| {i} | {row[sym]} | {row['score']} |")
          open("data/reports/top5_latest.md","w").write("\n".join(lines)+"\n")
          print("✅ top5_latest.csv & top5_latest.md gemaakt.")
          PY

      # -------- ANNOTATIE & GUARDS (optioneel) --------
      - name: Annotate top5 with market regime & advice
        run: |
          if [ -f scripts/annotate_market_regime.py ]; then
            python3 scripts/annotate_market_regime.py data/reports/top5_latest.md
          else
            echo "skip annotate_market_regime (script ontbreekt)"
          fi

      - name: Cooldown guard (note in MD)
        run: |
          if [ -f scripts/cooldown_guard.py ]; then
            python3 scripts/cooldown_guard.py --md data/reports/top5_latest.md || true
          else
            echo "skip cooldown_guard (script ontbreekt)"
          fi

      - name: Allocation advice (append MD)
        run: |
          if [ -f scripts/advise_allocation.py ]; then
            python3 scripts/advise_allocation.py --append-md --md-file data/reports/top5_latest.md || true
          else
            echo "skip advise_allocation (script ontbreekt)"
          fi

      # -------- MOONSHOT v2 (optioneel) --------
      - name: Run Moonshot v2 (exclude top-30 + bluechips)
        run: |
          if [ -f scripts/moonshot_v2.py ]; then
            python3 scripts/moonshot_v2.py \
              --scores-csv data/reports/scores_latest.csv \
              --scores-json data/reports/scores_latest.json \
              --out-csv data/reports/moonshots_v2_latest.csv \
              --out-md  data/reports/moonshots_v2_latest.md \
              --top 10 \
              --min-volume 1.0 \
              --exclude-top-rank 30 \
              --exclude-bluechips
          else
            echo "skip moonshot_v2 (script ontbreekt)"
          fi

      # -------- DATUM BESTANDSNAME --------
      - name: Dated copies (YYYY-MM-DD, UTC)
        id: datestamp
        run: |
          DATE="$(date -u +%Y-%m-%d)"; echo "date=$DATE" >> "$GITHUB_OUTPUT"
          for f in data/reports/scores_latest.csv data/reports/scores_latest.json \
                   data/reports/top5_latest.csv data/reports/top5_latest.md \
                   data/reports/moonshots_v2_latest.csv data/reports/moonshots_v2_latest.md \
                   data/reports/latest.csv data/reports/latest.json
          do
            [ -f "$f" ] || continue
            base="$(basename "$f")"; ext="${base##*.}"; name="${base%.*}"
            if [[ "$name" == *_v2_latest* ]]; then
              cp -f "$f" "data/reports/${name/_v2_latest/_v2_$DATE}.$ext"
            elif [[ "$name" == *_latest* ]]; then
              cp -f "$f" "data/reports/${name/_latest/_$DATE}.$ext"
            else
              cp -f "$f" "data/reports/${name}_$DATE.$ext"
            fi
          done

      - name: Upload reports artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports
          if-no-files-found: warn
          retention-days: 14
          path: |
            data/reports/latest.*
            data/reports/scores_latest.*
            data/reports/top5_latest.*
            data/reports/moonshots*.*
            data/reports/*_${{ steps.datestamp.outputs.date }}.*
